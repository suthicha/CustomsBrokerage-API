{"version":3,"sources":["../../src/controller/user.js"],"names":["jwt","require","squel","db","httpMsg","helper","settings","exports","authenticate","req","resp","body","Error","data","sql","select","from","field","where","Username","Password","toString","executeSql","callback","err","show500","length","user","token","sign","FullName","Fullname","secert","expiresIn","writeHead","write","JSON","stringify","success","end","sendAuthFail","ex","getList","execCommand","get","id","userId","parseInt","add","insert","into","set","StringNull","UPassword","Email","Phone","Department","Location","dontQuote","update","TrxId","table","delete"],"mappings":"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","file":"user.js","sourcesContent":["var jwt = require('jsonwebtoken');\nvar squel = require('squel');\nvar db = require('../core/db');\nvar httpMsg = require('../core/httpMsg');\nvar helper = require('../core/helper');\nvar settings = require('../settings');\n\nexports.authenticate = function(req, resp) {\n    try{\n        if (!req.body) throw new Error(\"Input not valid\");\n        var data = req.body;\n\n        if(data){\n\n            var sql = squel.select()\n                    .from(\"DTM_Users\")\n                    .field(\"Username\")\n                    .field(\"Fullname\")\n                    .where(\"Username = ?\", data.Username)\n                    .where(\"UPassword = ?\", data.Password)\n                    .where(\"UserStatus = ?\", \"A\")\n                    .toString();\n            \n            db.executeSql(sql, function(callback, err) { \n                if (err){\n                    httpMsg.show500(req, resp, err);\n                }else {\n                    if (data && callback.length > 0){\n                        var user = callback[0];\n                        if (user.Username === req.body.Username)\n                        {\n                            var token = jwt.sign({ \n                                Username: user.Username, \n                                FullName: user.Fullname\n                                }, settings.secert, {\n                                expiresIn: 86400 // expires in 24 hours\n                            });\n                        \n                            resp.writeHead(200, {\"Content-Type\":\"application/json\"});                        \n                            resp.write(JSON.stringify({\n                                success: true, \n                                Fullname: user.Fullname, \n                                token: token}));\n                            resp.end();\n\n                        }else{\n                            httpMsg.sendAuthFail(req, resp, \"Username not match.\");\n                        }\n                    }\n                    else {\n                        httpMsg.sendAuthFail(req, resp, \"Find not found Username: \" + data.Username + \" or Password incorrect.\");\n                    }\n                }\n            });\n        }\n        else {\n            throw new Error(\"Input not valid\");\n        }\n\n    }catch (ex) {\n        httpMsg.show500(req, resp, ex);\n    }\n};\n\nexports.getList = function(req, resp){\n    \n    var sql = squel.select()\n        .from(\"DTM_Users\")\n        .where(\"UserStatus = ?\", \"A\")\n        .toString();\n    helper.execCommand(req, resp, sql);\n}\n\nexports.get = function(req, resp, id){\n    try{\n        if (!id) throw new Error(\"Input not valid\");\n        var userId = parseInt(id);\n        var sql = squel.select()\n            .from(\"DTM_Users\")\n            .where(\"UserStatus = ?\", \"A\")\n            .where(\"TrxId = ?\", userId)\n            .toString();\n        helper.execCommand(req, resp, sql);\n\n    }catch(ex){\n        httpMsg.show500(req, resp, ex);\n    }\n    \n}\n\nexports.add = function(req, resp){\n    try{\n      if (!req.body) throw new Error(\"Input not valid\");\n      var data = req.body;\n      \n      if (data){\n\n          var sql = squel.insert()\n                .into(\"DMT_Users\")\n                .set(\"Username\", helper.StringNull(data.Username))\n                .set(\"UPassword\", helper.StringNull(data.UPassword))\n                .set(\"FullName\", helper.StringNull(data.FullName))\n                .set(\"Email\", helper.StringNull(data.Email))\n                .set(\"Phone\", helper.StringNull(data.Phone))\n                .set(\"Department\", helper.StringNull(data.Department))\n                .set(\"Location\", helper.StringNull(data.Location))\n                .set(\"RegisterDate\", \"GETDATE()\", { dontQuote: true })\n                .set(\"ExpiredDate\", \"DATEADD(year,10,GETDATE())\", { dontQuote: true })\n                .set(\"UserStatus\", \"A\")\n                .toString();\n          helper.execCommand(req, resp, sql);\n\n      }\n      else {\n        throw new Error(\"Input not valid\");\n      }\n\n    }\n    catch (ex) {\n        httpMsg.show500(req, resp, ex);\n    }\n}\n\nexports.update = function(req, resp){\n    try{\n      if (!req.body) throw new Error(\"Input not valid\");\n      var data = req.body;\n      \n      if (data){\n        if(!data.TrxId) throw new Error(\"UserId not provide\");\n        var sql = squel.update()\n            .table(\"DTM_Users\")\n            .set(\"UPassword\", helper.StringNull(data.UPassword))\n            .set(\"FullName\", helper.StringNull(data.FullName))\n            .set(\"Email\", helper.StringNull(data.Email))\n            .set(\"Phone\", helper.StringNull(data.Phone))\n            .set(\"Department\", helper.StringNull(data.Department))\n            .set(\"Location\", helper.StringNull(data.Location))\n            .where(\"TrxId = ?\", data.TrxId)\n            .toString();\n\n         helper.execCommand(req, resp, sql);\n      }\n      else {\n        throw new Error(\"Input not valid\");\n      }\n\n    }\n    catch (ex) {\n        httpMsg.show500(req, resp, ex);\n    }\n}\n\nexports.delete = function(req, resp){\n    try{\n      if (!req.body) throw new Error(\"Input not valid\");\n      var data = req.body;\n      \n      if (data){\n        if(!data.TrxId) throw new Error(\"UserId not provide\");\n        var sql = squel.update()\n            .table(\"DTM_Users\")\n            .set(\"UserStatus\", \"I\")\n            .set(\"ExpiredDate\", \"GETDATE()\", { dontQuote: true })\n            .where(\"TrxId = ?\", data.TrxId)\n            .toString();\n        helper.execCommand(req, resp, sql);\n        \n      }\n      else {\n        throw new Error(\"Input not valid\");\n      }\n    }\n    catch (ex) {\n        httpMsg.show500(req, resp, ex);\n    }\n}"]}